// deploy/001_deploy_private_list_check.ts
import { DeployFunction } from "hardhat-deploy/types";
import { HardhatRuntimeEnvironment } from "hardhat/types";

const func: DeployFunction = async (hre: HardhatRuntimeEnvironment) => {
  const { deployments, getNamedAccounts, network, ethers, run } = hre;
  const { deploy, log, read } = deployments;

  const { deployer } = await getNamedAccounts();
  const chainId = await hre.getChainId();

  log("----------------------------------------------------");
  log(`Network: ${network.name} (chainId=${chainId})`);
  log(`Deployer: ${deployer}`);

  // –ù–µ–º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç .env)
  const bal = await ethers.provider.getBalance(deployer);
  const fee = await ethers.provider.getFeeData();
  log(`Deployer balance: ${ethers.formatEther(bal)} ETH`);
  log(
    `FeeData: gasPrice=${fee.gasPrice?.toString() ?? "‚Äî"} | maxFeePerGas=${fee.maxFeePerGas?.toString() ?? "‚Äî"} | maxPriorityFeePerGas=${fee.maxPriorityFeePerGas?.toString() ?? "‚Äî"}`
  );

  // –î–µ–ø–ª–æ–π –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤; —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const res = await deploy("PrivateListCheck", {
    contract: "PrivateListCheck",
    from: deployer,
    args: [],
    log: true,
    // waitConfirmations: 1, // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ L2/–º–µ–¥–ª–µ–Ω–Ω—ã—Ö RPC
    // deterministicDeployment: false,
  });

  log(`‚úÖ PrivateListCheck deployed at: ${res.address}`);
  if (res.transactionHash) log(`   tx: ${res.transactionHash}`);

  // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å version() –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  try {
    const version: string = await read("PrivateListCheck", "version");
    log(`‚ÑπÔ∏è version(): ${version}`);
  } catch (e) {
    log(`(warn) version() read failed: ${(e as Error).message}`);
  }

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ Etherscan (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á, –Ω–æ .env –ø—Ä–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)
  // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å API-–∫–ª—é—á –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
  if (network.name !== "hardhat" && process.env.ETHERSCAN_API_KEY) {
    try {
      log("üîé Verifying on Etherscan‚Ä¶");
      await run("verify:verify", {
        address: res.address,
        constructorArguments: [],
      });
      log("‚úÖ Etherscan verification done");
    } catch (e) {
      log(`(warn) verify skipped/failed: ${(e as Error).message}`);
    }
  } else {
    log("üîé Verify skipped (no ETHERSCAN_API_KEY or local network).");
  }

  log("----------------------------------------------------");
};

export default func;
func.id = "deploy_PrivateListCheck";
func.tags = ["PrivateListCheck"];
